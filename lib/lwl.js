/*jshint white:false, eqnull:true, immed:false, loopfunc:true, node:true */

// Generated by CoffeeScript 1.6.3
(function() {
  var fs, logLevels, lv, lwl, util, _defaultLogFormatFunc, _i, _len, _log, _zeroPadding,
    _this = this;

  util = require('util');

  fs = require('fs');

  /**
  * モジュール本体
  */


  lwl = {
    logLevel: 'warn',
    logFile: './lwl.log',
    logFormatFunc: null
  };

  /**
  * スタック情報拡張
  *
  * 参考: http://stackoverflow.com/questions/11386492/accessing-line-number-in-v8-javascript-chrome-node-js
  */


  Object.defineProperty(lwl, '__stack', {
    get: function() {
      var e, orig, stack;
      orig = Error.prepareStackTrace;
      Error.prepareStackTrace = function(err, stack) {
        /* coffee-scriptのpatchStackTrace()で拡張されたエラーメッセージをセットしたスタックを返す*/

        var exErrStack, i, messages, s, _i, _len;
        exErrStack = typeof orig === "function" ? orig(err, stack) : void 0;
        if (exErrStack != null) {
          messages = exErrStack.split(/[\r\n]\s*/);
          /* 1行目は'Error:'だけなのでいらない*/

          messages.shift();
        } else {
          messages = [];
        }
        /* スタックに拡張エラー情報をセットしていく*/

        for (i = _i = 0, _len = stack.length; _i < _len; i = ++_i) {
          s = stack[i];
          Object.defineProperties(s, {
            messageEx: {
              value: messages[i],
              writable: false,
              enumerable: false,
              configurable: false
            },
            func: {
              get: function() {
                var _ref;
                return (_ref = this.getFunctionName()) != null ? _ref : '<anonymous>';
              }
            },
            file: {
              get: function() {
                return this.getFileName().match(/([^\\\/]*)$/)[1];
              }
            },
            line: {
              get: function() {
                /* 拡張エラー情報がなければオリジナルのgetLineNumber()の結果を返す*/

                if (!this.messageEx) {
                  return this.getLineNumber();
                }
                /**
                * 以下のようなcoffee-script拡張エラー情報から行番号の部分を抜き出す
                * ex) 'at test (/path/to/test.coffee:7:1, <js>:15:3)'
                */

                return (this.messageEx.match(/[^\\\/:]+:(\d+):\d+/ != null ? /[^\\\/:]+:(\d+):\d+/ : []))[1];
              }
            }
          });
        }
        return stack;
      };
      e = new Error();
      Error.captureStackTrace(e, arguments.callee);
      stack = e.stack;
      Error.prepareStackTrace = orig;
      return stack;
    }
  });

  /**
  * 指定できるログレベル一覧
  */


  logLevels = ['debug', 'info', 'notice', 'warn', 'error', 'crit', 'alert', 'emerg'];

  /**
  * ゼロ埋め
  */


  _zeroPadding = function(d) {
    return ("0" + d).substr(-2);
  };

  /**
  * ログ出力処理
  *
  * 参考: http://memo.yomukaku.net/entries/jfugzXU
  */


  /* '<タイムスタンプ> <関数名>@<ファイル名>:<行番号>'のフォーマット文字列で返す*/


  _defaultLogFormatFunc = function(timestamp, level, func, file, line, message) {
    return util.format('%s %s@%s:%s [%s] %s', timestamp, func, file, line, level, message);
  };

  _log = function(level, msg) {
    /* msgがnullやundefinedのみの場合はなかった事にする*/

    var args, d, m, output, stack, timestamp, v, _i, _len, _ref;
    if (msg.length === 0 || (msg.length === 1 && (msg[0] == null))) {
      msg.length = 0;
    }
    if (msg.length > 0 && logLevels.indexOf(level) >= logLevels.indexOf(lwl.logLevel)) {
      /* 変数内容を文字列として展開*/

      args = [];
      for (_i = 0, _len = msg.length; _i < _len; _i++) {
        m = msg[_i];
        v = util.inspect(m, false, null);
        if (typeof m === 'string') {
          v = v.replace(/^'(.+)'$/, '$1');
        }
        args.push(v);
      }
      /* タイムスタンプ作成*/

      d = new Date();
      timestamp = util.format('%s-%s-%s %s:%s:%s', d.getFullYear(), _zeroPadding(d.getMonth() + 1), _zeroPadding(d.getDate()), _zeroPadding(d.getHours()), _zeroPadding(d.getMinutes()), _zeroPadding(d.getSeconds()));
      /* 拡張スタックからファイル名、行番号、関数名を取得*/

      stack = lwl.__stack[2];
      /* ログフォーマット*/

      output = ((_ref = lwl.logFormatFunc) != null ? _ref : _defaultLogFormatFunc)(timestamp, level, stack.func, stack.file, stack.line, args.join(' '));
      if (lwl.logFile != null) {
        if (lwl.logFile === '-') {
          console.log(output);
        } else {
          fs.appendFileSync(lwl.logFile, "" + output + "\n");
        }
      }
      return output;
    }
  };

  /**
  * 各ログレベルの名前の出力関数をlwlオブジェクトに作成
  */


  for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
    lv = logLevels[_i];
    lwl[lv] = (function(lv) {
      return function() {
        return _log(lv, Array.prototype.slice.call(arguments));
      };
    })(lv);
  }

  module.exports = lwl;

}).call(this);
