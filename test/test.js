/*jshint white:false, eqnull:true, immed:false, node:true */

// Generated by CoffeeScript 1.6.3
(function() {
  var assert, defaultLogFile, fs, logExists, logLevels, logParse, lwl, path, spawn, suite, unlinkLog, util, vows, __cwd,
    _this = this;

  vows = require('vows');

  assert = require('assert');

  fs = require('fs');

  path = require('path');

  spawn = require('child_process').spawn;

  util = require('util');

  lwl = require('../lib/lwl');

  __cwd = path.dirname(__filename);

  defaultLogFile = "" + __cwd + "/lwl.log";

  logLevels = ['debug', 'info', 'notice', 'warn', 'error', 'crit', 'alert', 'emerg'];

  logParse = function(log) {
    var l, line, p, parses, _i, _len;
    line = log.trim().split('\n');
    parses = [];
    for (_i = 0, _len = line.length; _i < _len; _i++) {
      l = line[_i];
      p = l.match(/^([\d\-]+)\s+([\d:]+)\s+([^@]+)@([^\s]+)\s+\[(\w+)\]\s+(.+)$/);
      parses.push({
        orig: l,
        date: p[1],
        time: p[2],
        func: p[3],
        filename: p[4],
        level: p[5],
        message: p[6]
      });
    }
    return parses;
  };

  unlinkLog = function(logFile) {
    if (logFile == null) {
      logFile = defaultLogFile;
    }
    if (fs.existsSync(defaultLogFile)) {
      return fs.unlinkSync(defaultLogFile);
    }
  };

  logExists = function() {
    return fs.existsSync(defaultLogFile);
  };

  suite = vows.describe('lwl test');

  /**
  * 基本テスト
  */


  suite.addBatch({
    'logFile: デフォルト': {
      topic: function() {
        var retval;
        lwl.logFile = defaultLogFile;
        retval = lwl.error('logFile: デフォルト');
        return {
          retval: retval,
          log: logParse(fs.readFileSync(defaultLogFile, 'utf-8'))
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      './lwl.logに1行書き出される': function(topic) {
        return assert.equal(topic.log.length, 1);
      },
      'メッセージは"logFile: デフォルト"': function(topic) {
        return assert.equal(topic.log[0].message, 'logFile: デフォルト');
      },
      '出力時の戻り値とログに出力されたメッセージが同一': function(topic) {
        return assert.equal(topic.log[0].orig, topic.retval);
      }
    }
  });

  /**
  * logFileの指定方法による出力の違いの検証
  */


  suite.addBatch({
    'logFile: "-"': {
      topic: function() {
        lwl.logFile = '-';
        lwl.error('logFile: "-"');
        return fs.existsSync(defaultLogFile);
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '標準出力に表示される(コンソールにログ内容が出力されているか目で確認ｗ)': function(topic) {
        return assert.isFalsentopic;
      }
    }
  });

  suite.addBatch({
    'logFile: null': {
      topic: function() {
        var retval;
        lwl.logFile = null;
        retval = lwl.error('logFile: null');
        return {
          retval: retval,
          log: logExists()
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '出力されない': function(topic) {
        return assert.isFalse(topic.log);
      },
      '出力時の戻り値はある': function(topic) {
        var parsed;
        parsed = logParse(topic.retval);
        assert.equal(parsed.length, 1);
        return assert.equal(parsed[0].message, 'logFile: null');
      }
    }
  });

  /**
  * ログに出力するメッセージの型の検証
  */


  suite.addBatch({
    'message: なし': {
      topic: function() {
        var retval;
        lwl.logFile = defaultLogFile;
        retval = lwl.error();
        return {
          retval: retval,
          log: logExists()
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '出力されない': function(topic) {
        return assert.isFalse(topic.log);
      },
      '出力時の戻り値もなし': function(topic) {
        return assert.isUndefined(topic.retval);
      }
    }
  });

  suite.addBatch({
    'message: null': {
      topic: function() {
        var retval;
        lwl.logFile = defaultLogFile;
        retval = lwl.error(null);
        return {
          retval: retval,
          log: logExists()
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '出力されない': function(topic) {
        return assert.isFalse(topic.log);
      },
      '出力時の戻り値もなし': function(topic) {
        return assert.isUndefined(topic.retval);
      }
    }
  });

  suite.addBatch({
    'message: undefined': {
      topic: function() {
        var retval;
        lwl.logFile = defaultLogFile;
        retval = lwl.error(void 0);
        return {
          retval: retval,
          log: logExists()
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '出力されない': function(topic) {
        return assert.isFalse(topic.log);
      },
      '出力時の戻り値もなし': function(topic) {
        return assert.isUndefined(topic.retval);
      }
    }
  });

  suite.addBatch({
    'message: undefined or null複数': {
      topic: function() {
        var retval;
        lwl.logFile = defaultLogFile;
        retval = lwl.error(void 0, null);
        return {
          retval: retval,
          log: logParse(fs.readFileSync(defaultLogFile, 'utf-8'))
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      './lwl.logに1行書き出される': function(topic) {
        return assert.equal(topic.log.length, 1);
      },
      'メッセージは"undefined null"': function(topic) {
        return assert.equal(topic.log[0].message, 'undefined null');
      },
      '出力時の戻り値とログに出力されたメッセージが同一': function(topic) {
        return assert.equal(topic.log[0].orig, topic.retval);
      }
    }
  });

  suite.addBatch({
    'message: 文字列': {
      topic: function() {
        lwl.logFile = defaultLogFile;
        lwl.logFile = null;
        return logParse(lwl.error('message: 文字列'))[0];
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '囲みクォーテーションが除去された状態で出力される': function(topic) {
        return assert.equal(topic.message, 'message: 文字列');
      }
    }
  });

  suite.addBatch({
    'message: 整数': {
      topic: function() {
        lwl.logFile = defaultLogFile;
        return logParse(lwl.error(100))[0];
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      'そのまま出力される': function(topic) {
        return assert.equal(topic.message, 100);
      }
    }
  });

  suite.addBatch({
    'message: 小数': {
      topic: function() {
        lwl.logFile = defaultLogFile;
        return logParse(lwl.error(0.00999009))[0];
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      'そのまま出力される': function(topic) {
        return assert.equal(topic.message, 0.00999009);
      }
    }
  });

  suite.addBatch({
    'message: true': {
      topic: function() {
        lwl.logFile = defaultLogFile;
        return logParse(lwl.error(true))[0];
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '文字列"true"が出力される': function(topic) {
        return assert.equal(topic.message, 'true');
      }
    }
  });

  suite.addBatch({
    'message: false': {
      topic: function() {
        lwl.logFile = defaultLogFile;
        return logParse(lwl.error(false))[0];
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '文字列"false"が出力される': function(topic) {
        return assert.equal(topic.message, 'false');
      }
    }
  });

  suite.addBatch({
    'message: 配列': {
      topic: function() {
        var msg;
        lwl.logFile = defaultLogFile;
        msg = ['aaa', 'bbb', 111, 222, 333, 'ccc'];
        return {
          msg: msg,
          log: logParse(lwl.error(msg))[0]
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '展開されて出力される': function(topic) {
        return assert.equal(util.inspect(topic.msg, false, null), topic.log.message);
      }
    }
  });

  suite.addBatch({
    'message: 配列内のundefined or null': {
      topic: function() {
        var msg;
        lwl.logFile = defaultLogFile;
        msg = ['aaa', 'bbb', void 0, 111, 222, null, 333, 'ccc'];
        return {
          msg: msg,
          log: logParse(lwl.error(msg))[0]
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      'undefinedが含まれている': function(topic) {
        assert.equal(util.inspect(topic.msg, false, null), topic.log.message);
        return assert.isUndefined(topic.msg[2]);
      },
      'nullが含まれている': function(topic) {
        return assert.isNull(topic.msg[5]);
      }
    }
  });

  suite.addBatch({
    'message: オブジェクト': {
      topic: function() {
        var msg;
        lwl.logFile = defaultLogFile;
        msg = {
          aaa: 1000,
          bbb: 'xxx',
          ccc: 0.05,
          ddd: '999'
        };
        return {
          msg: msg,
          log: logParse(lwl.error(msg))[0]
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '展開されて出力される': function(topic) {
        return assert.equal(util.inspect(topic.msg, false, null), topic.log.message);
      }
    }
  });

  suite.addBatch({
    'message: オブジェクト内のundefined or null': {
      topic: function() {
        var msg;
        lwl.logFile = defaultLogFile;
        msg = {
          aaa: 1000,
          bbb: void 0,
          ccc: 0.05,
          ddd: null
        };
        return {
          msg: msg,
          log: logParse(lwl.error(msg))[0]
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      'undefinedが含まれている': function(topic) {
        assert.equal(util.inspect(topic.msg, false, null), topic.log.message);
        return assert.isUndefined(topic.msg.bbb);
      },
      'nullが含まれている': function(topic) {
        return assert.isNull(topic.msg.ddd);
      }
    }
  });

  suite.addBatch({
    'message: 配列内のオブジェクト': {
      topic: function() {
        var msg;
        lwl.logFile = defaultLogFile;
        msg = [
          {
            aaa: 111,
            bbb: 222
          }, {
            ccc: 333,
            ddd: 444
          }
        ];
        return {
          msg: msg,
          log: logParse(lwl.error(msg))[0]
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '全て展開されて出力される': function(topic) {
        return assert.equal(util.inspect(topic.msg, false, null), topic.log.message);
      }
    }
  });

  suite.addBatch({
    'message: オブジェクト内の配列': {
      topic: function() {
        var msg;
        lwl.logFile = defaultLogFile;
        msg = {
          aaa: ['xxx', 'yyy', 111],
          bbb: ['www', 0.932, '888']
        };
        return {
          msg: msg,
          log: logParse(lwl.error(msg))[0]
        };
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '全て展開されて出力される': function(topic) {
        return assert.equal(util.inspect(topic.msg, false, null), topic.log.message);
      }
    }
  });

  /**
  * ログレベルの指定の検証
  *
  * forで回そうとしたらindentがおかしいとかでcoffee-scriptでエラーになったのでベタ書き
  */


  suite.addBatch({
    'logLevel: "emerg"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'emerg';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"emerg"以外のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 1);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "alert"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'alert';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"alert"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 2);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "crit"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'crit';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"crit"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 3);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "error"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'error';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"error"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 4);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "warn"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'warn';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"warn"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 5);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "notice"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'notice';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"notice"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 6);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "info"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'info';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"info"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 7);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "debug"': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'debug';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '"debug"未満のログは出力されない': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 8);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    'logLevel: "unknown"(規定外のレベル)': {
      topic: function() {
        var ll, _i, _len;
        lwl.logFile = defaultLogFile;
        lwl.logLevel = 'unknown';
        for (_i = 0, _len = logLevels.length; _i < _len; _i++) {
          ll = logLevels[_i];
          lwl[ll](ll);
        }
        return logParse(fs.readFileSync(defaultLogFile, 'utf-8'));
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '全てのログが出力される': function(topic) {
        var i, t, _i, _len, _results;
        assert.equal(topic.length, 8);
        _results = [];
        for (i = _i = 0, _len = topic.length; _i < _len; i = ++_i) {
          t = topic[i];
          _results.push(assert.equal(t.level, logLevels[logLevels.length - topic.length + i]));
        }
        return _results;
      }
    }
  });

  /**
  * 外部ファイル実行におけるログファイルの内容の検証(ファイル名、関数名、行番号)
  *
  * vows内でcoffeeファイルをrequireしてもjsに展開されてしまうので外部ファイルとして実行する
  */


  suite.addBatch({
    '外部ファイル: coffee': {
      topic: function() {
        var child, coffee, extPath,
          _this = this;
        coffee = "" + __cwd + "/../node_modules/coffee-script/bin/coffee";
        extPath = "" + __cwd + "/external/coffee";
        child = spawn('node', [coffee, "" + extPath + "/main.coffee"], {
          cwd: extPath
        });
        child.on('exit', function(code) {
          lwl.logFile = defaultLogFile;
          return _this.callback(void 0, logParse(fs.readFileSync(defaultLogFile, 'utf-8')));
        });
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '各ログの内容を検証': function(topic) {
        var chk, extSrc, idx, line, src, srcInfo, srcLine, t, tmp, _i, _j, _k, _len, _len1, _len2, _ref, _results;
        assert.equal(topic.length, 10);
        srcInfo = [];
        _ref = ['main', 'sub'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          extSrc = _ref[_i];
          srcLine = fs.readFileSync("" + __cwd + "/external/coffee/" + extSrc + ".coffee", 'utf-8').split(/[\r\n]/);
          for (line = _j = 0, _len1 = srcLine.length; _j < _len1; line = ++_j) {
            src = srcLine[line];
            chk = src.match(/lwl\.\w+\s+'(.*)'/);
            if (chk) {
              tmp = chk[1].split(/\s+/);
              tmp.unshift("" + extSrc + ".coffee:" + (line + 1));
              srcInfo.push(tmp);
            }
          }
        }
        _results = [];
        for (idx = _k = 0, _len2 = topic.length; _k < _len2; idx = ++_k) {
          t = topic[idx];
          assert.equal(t.filename, srcInfo[idx][0]);
          assert.equal(t.func, srcInfo[idx][1]);
          _results.push(assert.equal(t.level, srcInfo[idx][2]));
        }
        return _results;
      }
    }
  });

  suite.addBatch({
    '外部ファイル: js': {
      topic: function() {
        var child, extPath,
          _this = this;
        extPath = "" + __cwd + "/external/js";
        child = spawn('node', ["" + extPath + "/main.js"], {
          cwd: extPath
        });
        child.on('exit', function(code) {
          lwl.logFile = defaultLogFile;
          return _this.callback(void 0, logParse(fs.readFileSync(defaultLogFile, 'utf-8')));
        });
      },
      teardown: function(topic) {
        return unlinkLog();
      },
      '各ログの内容を検証': function(topic) {
        var chk, extSrc, idx, line, src, srcInfo, srcLine, t, tmp, _i, _j, _k, _len, _len1, _len2, _ref, _results;
        assert.equal(topic.length, 10);
        srcInfo = [];
        _ref = ['main', 'sub'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          extSrc = _ref[_i];
          srcLine = fs.readFileSync("" + __cwd + "/external/js/" + extSrc + ".js", 'utf-8').split(/[\r\n]/);
          for (line = _j = 0, _len1 = srcLine.length; _j < _len1; line = ++_j) {
            src = srcLine[line];
            chk = src.match(/lwl\.\w+\('(.*)'\)/);
            if (chk) {
              tmp = chk[1].split(/\s+/);
              tmp.unshift("" + extSrc + ".js:" + (line + 1));
              srcInfo.push(tmp);
            }
          }
        }
        _results = [];
        for (idx = _k = 0, _len2 = topic.length; _k < _len2; idx = ++_k) {
          t = topic[idx];
          assert.equal(t.filename, srcInfo[idx][0]);
          assert.equal(t.func, srcInfo[idx][1]);
          _results.push(assert.equal(t.level, srcInfo[idx][2]));
        }
        return _results;
      }
    }
  });

  suite["export"](module);

}).call(this);
