/*jshint white:false, eqnull:true, immed:false, node:true */

// Generated by CoffeeScript 1.6.3
(function() {
  var ClassA, a, c, funcA, log, lwl, showStack,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  lwl = require('../lib/lwl');

  /* ログ出力レベルをdebugに設定*/


  lwl.logLevel = 'debug';

  /* メッセージがnull or undefinedの場合は出力されない*/


  lwl.alert(null);

  /* 関数外で実行された場合や無名関数で実行された場合は関数名が<anonymous>で出力される*/


  lwl.emerg('test');

  a = (function() {
    return lwl.crit(100);
  })();

  /* 関数内で実行された場合は関数名がログに出力される*/


  funcA = function() {
    lwl.error(0.0005);
    return lwl.warn([1, 2, 3, 4, '5']);
  };

  funcA();

  /* クラス内で実行された場合はクラス.メソッド名がログに出力される*/


  ClassA = (function() {
    function ClassA() {
      this.methodB = __bind(this.methodB, this);
      this.methodA = __bind(this.methodA, this);
      lwl.notice('xxx', void 0, 123);
    }

    ClassA.prototype.methodA = function() {
      return lwl.info({
        xxx: 'aaa',
        yyy: 'bbb'
      });
    };

    ClassA.prototype.methodB = function() {
      return lwl.debug('test', 1, 4, ['xxx', 'yyy'], {
        aaa: 1,
        bbb: 2
      });
    };

    return ClassA;

  })();

  c = new ClassA;

  c.methodA();

  c.methodB();

  /* ここからログ出力先を標準出力に設定*/


  lwl.logFile = '-';

  /* ついでにログフォーマット変更*/


  lwl.logFormatFunc = function(timestamp, level, func, file, line, message) {
    return "[" + level + "] " + timestamp + " ... " + file + ":" + line + "(" + func + ") -> " + message;
  };

  lwl.info('this is logged', 123, {
    a: [void 0, null],
    b: null
  });

  /* ログ出力レベルをwarnに設定*/


  lwl.logLevel = 'warn';

  lwl.info('this is not logged');

  /* ログを出力しない(戻り値にはログが入る)*/


  lwl.logFile = null;

  log = lwl.error(new Error('only return value'));

  console.log("###" + log + "###");

  /* 拡張スタック情報取得*/


  showStack = function() {
    var s, stack;
    stack = lwl.__stack;
    console.log('lwl.__stack:');
    return console.log('  ' + ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = stack.length; _i < _len; _i++) {
        s = stack[_i];
        _results.push("" + s.func + "@" + s.file + ":" + s.line);
      }
      return _results;
    })()).join('\n  '));
  };

  showStack();

}).call(this);
